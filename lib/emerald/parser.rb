#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

    require_relative "lexer"

class EmeraldLang < Racc::Parser

module_eval(<<'...end em_parser.y.rb/module_eval...', 'em_parser.y.rb', 36)
    def parse(input)
        scan_str(input)
    end

    def bin_op(left, op, right)
=begin
        case op
            when "+"
                return eval("#{left} + #{right}")
            when "-"
                return left - right
            when "*"
                return left * right
            when "/"
                return left / right unless right == 0
                return 0
            when "=="
                return left == right
            when "!="
                return left != right
            when "<"
                return left < right
            when ">"
                return left > right
            when "<="
                return left <= right
            when ">="
                return left >= right
            else
                return nil
        end
=end
        return eval("#{left} #{op} #{right}")
    end
...end em_parser.y.rb/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,     2,     3,     3,     5,     4,     7,     8,     9 ]

racc_action_check = [
     0,     3,     0,     3,     2,     1,     4,     5,     6 ]

racc_action_pointer = [
    -2,     5,     1,    -1,     6,     5,     3,   nil,   nil,   nil ]

racc_action_default = [
    -4,    -4,    -1,    -4,    -4,    -4,    -4,    10,    -2,    -3 ]

racc_goto_table = [
     1,   nil,   nil,     6 ]

racc_goto_check = [
     1,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0 ]

racc_goto_default = [
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 7, :_reduce_none,
  3, 7, :_reduce_2,
  3, 7, :_reduce_3 ]

racc_reduce_n = 4

racc_shift_n = 10

racc_token_table = {
  false => 0,
  :error => 1,
  :INT => 2,
  :OP => 3,
  :LPAREN => 4,
  :RPAREN => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INT",
  "OP",
  "LPAREN",
  "RPAREN",
  "$start",
  "expr" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'em_parser.y.rb', 16)
  def _reduce_2(val, _values, result)
     return self.bin_op(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'em_parser.y.rb', 17)
  def _reduce_3(val, _values, result)
     return val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class EmeraldLang
