#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

    require_relative "lexer"

class EmeraldLang < Racc::Parser

module_eval(<<'...end em_parser.y.rb/module_eval...', 'em_parser.y.rb', 19)
    def parse(input)
        scan_str(input)
    end
...end em_parser.y.rb/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,     2,    11,    10,     4,     3,     3,     5,     6,     7,
     8,    12,    13,    14,    15 ]

racc_action_check = [
     0,     3,     5,     4,     1,     0,     3,     2,     2,     2,
     2,     6,     7,     8,     9 ]

racc_action_pointer = [
    -2,     4,     4,    -1,     3,     0,     9,    10,    11,     6,
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -7,    -7,    -1,    -7,    -7,    -7,    -7,    -7,    -7,    -7,
    16,    -2,    -3,    -4,    -5,    -6 ]

racc_goto_table = [
     1,   nil,   nil,     9 ]

racc_goto_check = [
     1,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0 ]

racc_goto_default = [
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 10, :_reduce_none,
  3, 10, :_reduce_2,
  3, 10, :_reduce_3,
  3, 10, :_reduce_4,
  3, 10, :_reduce_5,
  3, 10, :_reduce_6 ]

racc_reduce_n = 7

racc_shift_n = 16

racc_token_table = {
  false => 0,
  :error => 1,
  :INT => 2,
  :ADD => 3,
  :SUB => 4,
  :MUL => 5,
  :DIV => 6,
  :LPAREN => 7,
  :RPAREN => 8 }

racc_nt_base = 9

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INT",
  "ADD",
  "SUB",
  "MUL",
  "DIV",
  "LPAREN",
  "RPAREN",
  "$start",
  "expression" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'em_parser.y.rb', 3)
  def _reduce_2(val, _values, result)
     return val[0] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'em_parser.y.rb', 4)
  def _reduce_3(val, _values, result)
     return val[0] - val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'em_parser.y.rb', 5)
  def _reduce_4(val, _values, result)
     return val[0] * val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'em_parser.y.rb', 6)
  def _reduce_5(val, _values, result)
     if val[2] == 0
                                   return 0
                               else
                                   return val[0] / val[2] 
                               end 
    result
  end
.,.,

module_eval(<<'.,.,', 'em_parser.y.rb', 11)
  def _reduce_6(val, _values, result)
     return val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class EmeraldLang
