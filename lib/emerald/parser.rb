#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

    require_relative "lexer"
    require_relative "../emerald"

class EmeraldLang < Racc::Parser

module_eval(<<'...end em_parser.y.rb/module_eval...', 'em_parser.y.rb', 21)
    def initialize
        @global_env = Emerald::EmeraldEnvironment.new()
    end

    def parse(input)
        scan_str(input)
    end

    def bin_op(left, op, right)
        return eval("#{left} #{op} #{right}")
    end
...end em_parser.y.rb/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,     2,     3,     4,    14,     5,     7,     7,     7,     2,
     3,     4,    11,     5,     2,     3,     4,    15,     5,     2,
     3,     4,    10,     5,     2,     3,     4,     7,     5,     8,
     7 ]

racc_action_check = [
     1,    15,    15,    15,     9,    15,    12,     9,     1,     0,
     0,     0,     6,     0,     4,     4,     4,    10,     4,     7,
     7,     7,     5,     7,     8,     8,     8,    13,     8,     3,
    16 ]

racc_action_pointer = [
     7,     0,   nil,    22,    12,    19,    12,    17,    22,    -1,
    10,   nil,    -2,    19,   nil,    -1,    22 ]

racc_action_default = [
    -7,    -7,    -1,    -2,    -7,    -7,    -7,    -7,    -7,    -7,
    -7,    17,    -6,    -5,    -3,    -7,    -4 ]

racc_goto_table = [
     1,   nil,   nil,   nil,     9,   nil,   nil,    12,    13,   nil,
   nil,   nil,   nil,   nil,   nil,    16 ]

racc_goto_check = [
     1,   nil,   nil,   nil,     1,   nil,   nil,     1,     1,   nil,
   nil,   nil,   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0 ]

racc_goto_default = [
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 10, :_reduce_1,
  1, 10, :_reduce_2,
  3, 10, :_reduce_3,
  4, 10, :_reduce_4,
  3, 10, :_reduce_5,
  3, 10, :_reduce_6 ]

racc_reduce_n = 7

racc_shift_n = 17

racc_token_table = {
  false => 0,
  :error => 1,
  :INT => 2,
  :SYM => 3,
  :LPAREN => 4,
  :RPAREN => 5,
  :VAR => 6,
  :EQUAL => 7,
  :OP => 8 }

racc_nt_base = 9

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INT",
  "SYM",
  "LPAREN",
  "RPAREN",
  "VAR",
  "EQUAL",
  "OP",
  "$start",
  "expr" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'em_parser.y.rb', 2)
  def _reduce_1(val, _values, result)
     return val[0].to_i 
    result
  end
.,.,

module_eval(<<'.,.,', 'em_parser.y.rb', 3)
  def _reduce_2(val, _values, result)
     res = @global_env.lookup(val[0])
                                    if res.nil?
                                        return val[0]
                                    else
                                        return res 
                                    end 
    result
  end
.,.,

module_eval(<<'.,.,', 'em_parser.y.rb', 9)
  def _reduce_3(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'em_parser.y.rb', 10)
  def _reduce_4(val, _values, result)
     @global_env[val[1]] = val[3]; return val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'em_parser.y.rb', 11)
  def _reduce_5(val, _values, result)
     @global_env[val[0]] = val[2]; return val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'em_parser.y.rb', 12)
  def _reduce_6(val, _values, result)
     return self.bin_op(val[0], val[1], val[2]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class EmeraldLang
